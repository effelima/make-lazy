.PHONY: lazy-setup
lazy-setup:
	@echo "$(COLOR_LAZY)üõå Snoring while creating templates...$(COLOR_RESET)"
	
	@$(MAKE) lazy-setup-docker
	@$(MAKE) lazy-setup-env
	
	@echo "$(COLOR_SUCCESS)üò™ Templates ready at $(ENVS_DIR)$(COLOR_RESET)"

.PHONY: lazy-setup-docker
lazy-setup-docker:
	@echo "$(COLOR_LAZY)üõå Checking docker setup...$(COLOR_RESET)"
	
	@# if docker-compose & docker-compose.dist exists, do nothing
	@if [ -f "$(PROJECT_ROOT)/docker-compose.yml" ] && [ -f "$(DOCKER_DIR)/docker-compose.dist.yml" ]; then \
		echo "$(COLOR_SUCCESS)üò¥ Docker files already exist (too lazy to do anything)$(COLOR_RESET)"; \
		exit 0; \
	fi

	@if [ ! -d "$(DOCKER_DIR)" ]; then \
		echo "$(COLOR_WARNING)‚ö†Ô∏è Docker directory missing, creating it...$(COLOR_RESET)"; \
		mkdir -p "$(DOCKER_DIR)"; \
		echo "$(COLOR_SUCCESS)üìÅ Created $(DOCKER_DIR)$(COLOR_RESET)"; \
	fi
	
	@if [ ! -f "$(DOCKER_DIR)/docker-compose.dist.yml" ]; then \
		if [ -f "$(PROJECT_ROOT)/docker-compose.yml" ]; then \
			cp "$(PROJECT_ROOT)/docker-compose.yml" "$(DOCKER_DIR)/docker-compose.dist.yml"; \
			echo "$(COLOR_SUCCESS)üò™ Copied docker template$(COLOR_RESET)"; \
		else \
			echo "$(COLOR_WARNING)‚ö†Ô∏è No docker compose file found, creating one...$(COLOR_RESET)"; \
			echo "# Lazy-generated compose template" > "$(DOCKER_DIR)/docker-compose.dist.yml"; \
		fi; \
	fi

	@if [ ! -f "$(PROJECT_ROOT)/docker-compose.yml" ] && [ -f "$(DOCKER_DIR)/docker-compose.dist.yml" ]; then \
		cp "$(DOCKER_DIR)/docker-compose.dist.yml" "$(PROJECT_ROOT)/docker-compose.yml"; \
		echo "$(COLOR_SUCCESS)üò™ Docker config deployed$(COLOR_RESET)"; \
	fi

.PHONY: lazy-setup-env
lazy-setup-env:
	@echo "$(COLOR_LAZY)üõå Waking up just enough to setup your env...$(COLOR_RESET)"


	@# if docker-compose & docker-compose.dist exists, do nothing
	@if [ -f "$(PROJECT_ROOT)/.env" ] && [ -f "$(ENVS_DIR)/dev.env" ] && [ -f "$(ENVS_DIR)/stage.env" ] && [ -f "$(ENVS_DIR)/prod.env" ]; then \
		echo "$(COLOR_SUCCESS)üò¥ .Envs files already exist (too lazy to do anything)$(COLOR_RESET)"; \
		exit 0; \
	fi

	@if [ ! -d "$(ENVS_DIR)" ]; then \
		echo "$(COLOR_WARNING)‚ö†Ô∏è .Envs directory missing, creating it...$(COLOR_RESET)"; \
		mkdir -p "$(ENVS_DIR)"; \
		echo "$(COLOR_SUCCESS)üìÅ Created $(DOCKER_DIR)$(COLOR_RESET)"; \
	fi

	@if [ ! -f "$(ENVS_DIR)/dev.env" ]; then \
		echo "$(COLOR_LAZY)üìù Creating dev.env file$(COLOR_RESET)"; \
		echo "# Autogenerated dev.env" > "$(ENVS_DIR)/dev.env"; \
	fi

	@if [ ! -f "$(ENVS_DIR)/stage.env" ]; then \
		echo "$(COLOR_LAZY)üìù Creating stage.env file$(COLOR_RESET)"; \
		echo "# Autogenerated stage.env" > "$(ENVS_DIR)/stage.env"; \
	fi

	@if [ ! -f "$(ENVS_DIR)/prod.env" ]; then \
		echo "$(COLOR_LAZY)üìù Creating prod.env file$(COLOR_RESET)"; \
		echo "# Autogenerated prod.env" > "$(ENVS_DIR)/prod.env"; \
	fi

	@if [ -f "$(PROJECT_ROOT)/.env" ]; then \
		echo "$(COLOR_INFO)‚ùì Do you want to copy .env contents to other env files? [y/N]$(COLOR_RESET)"; \
		read -p "Choice: " choice; \
		if [ "$$choice" = "y" ] || [ "$$choice" = "Y" ]; then \
			echo "$(COLOR_LAZY)üìù Copying .env to dev.env$(COLOR_RESET)"; \
			grep -vE '^(#|$$)' "$(PROJECT_ROOT)/.env" | awk -F= '{print $$1 "="}' > "$(ENVS_DIR)/dev.env"; \
			echo "$(COLOR_LAZY)üìù Copying .env to stage.env$(COLOR_RESET)"; \
			grep -vE '^(#|$$)' "$(PROJECT_ROOT)/.env" | awk -F= '{print $$1 "="}' > "$(ENVS_DIR)/stage.env"; \
			echo "$(COLOR_LAZY)üìù Copying .env to prod.env$(COLOR_RESET)"; \
			grep -vE '^(#|$$)' "$(PROJECT_ROOT)/.env" | awk -F= '{print $$1 "="}' > "$(ENVS_DIR)/prod.env"; \
			echo "$(COLOR_SUCCESS)‚úÖ Environment files updated$(COLOR_RESET)"; \
		else \
			echo "$(COLOR_WARNING)‚ö†Ô∏è Keeping existing env files$(COLOR_RESET)"; \
		fi; \
	else \
		echo "$(COLOR_LAZY)üìù Creating .env file$(COLOR_RESET)"; \
		cp "$(ENVS_DIR)/dev.env" "$(PROJECT_ROOT)/.env"; \
	fi

